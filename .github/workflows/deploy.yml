name: Order Service CI/CD - Blue Green

on:
  push:
    branches:
      - master

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/order-service

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 🧾 Step 1: Checkout the code
      - name: 🧾 Checkout code
        uses: actions/checkout@v3

      # 🔐 Step 2: Configure AWS credentials
      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # ⚙️ Step 3: Set up kubectl
      - name: ⚙️ Set up kubectl
        uses: azure/setup-kubectl@v3

      # 📡 Step 4: Update kubeconfig for EKS
      - name: 📡 Update kubeconfig for EKS
        run: aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME

      # 🐳 Step 5: Docker login
      - name: 🐳 Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 🏗️ Step 6: Build and push Docker image
      - name: 🏗️ Build and push Docker image
        run: |
          docker build -t $IMAGE_NAME:latest .
          docker push $IMAGE_NAME:latest

      # 🚀 Step 7: Deploy Green Version to EKS
      - name: 🚀 Deploy Green Version
        run: |
          kubectl apply -f k8s/order-service/order-service-green.yaml

      # ✅ Step 8: Wait for Green pod readiness
      - name: ✅ Health Check on Green
        run: |
          GREEN_POD=$(kubectl get pods -l app=order-service,version=green -o jsonpath="{.items[0].metadata.name}")
          kubectl wait --for=condition=Ready pod/$GREEN_POD --timeout=90s

      # 🗃 Step 9: Run Prisma migrate inside Green pod
      - name: 🗃 Run Prisma migrate deploy in Green Pod
        run: |
          GREEN_POD=$(kubectl get pods -l app=order-service,version=green -o jsonpath="{.items[0].metadata.name}")
          kubectl exec $GREEN_POD -- npx prisma migrate deploy

      - name: 🧪 Run Integration Tests Against Green
        run: |
          GREEN_IP=$(kubectl get svc order-service -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
          
          echo "Waiting for Load Balancer DNS to resolve..."
          until nslookup $GREEN_IP; do echo "⏳ Waiting..."; sleep 5; done
          
          echo "Sleeping 20s for pods to warm up..."
          sleep 20
          
          echo "Testing endpoint: http://$GREEN_IP:3000/api/orders"
          curl --fail http://$GREEN_IP:3000/api/orders

      # 🔁 Step 10: Switch Service to Green
      - name: 🔁 Switch Service to Green (Blue-Green switch)
        run: |
          kubectl patch svc order-service -p '{"spec": {"selector": {"app": "order-service", "version": "green"}}}'

      # 🔄 Step 11: Restart deployment to ensure update
      - name: 🔄 Rollout restart of Order Service
        run: |
          kubectl rollout restart deployment order-service-green

      # 🧹 Step 12: Clean up old Blue deployment
      - name: 🧹 Optionally Clean Up Blue Version
        if: success()
        run: |
          kubectl delete deployment order-service-blue || true


#################################################################
# 🚦 Blue-Green Strategy Summary:
# - Both "blue" and "green" deployments exist in the cluster.
# - Only one of them receives traffic at a time via the shared
#   "order-service" LoadBalancer Service.
# - Traffic switch is done using `kubectl patch` to change the
#   selector on the service.
# - Ensures 100% uptime during deployment.
# - Easy rollback by switching selector back to Blue.
#################################################################